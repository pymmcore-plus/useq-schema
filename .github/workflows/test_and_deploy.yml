name: tests

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9 ,"3.10"]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[testing]

      - name: Test
        run: pytest -v --color=yes --cov-report=xml --cov=useq

      - name: Coverage
        if: runner.os == 'Linux'
        uses: codecov/codecov-action@v1

  test_pymmcore:
    name: Test pymmcore-plus
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/checkout@v3
        with:
          repository: pymmcore-plus/pymmcore-plus
          path: pymmcore-plus-from-github

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e pymmcore-plus-from-github[testing]
          pip install -e .[testing]

      - name: Install Micro-Manager
        run: python -m pymmcore_plus.install

      - name: Test
        run: pytest -v --color=yes
        working-directory: pymmcore-plus-from-github


  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'pymmcore-plus/useq-schema' && contains(github.ref, 'tags') }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine

      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python setup.py sdist bdist_wheel
          twine upload dist/*
